Docker isolates all content, code, and data in a container from your local filesystem.
Sometimes you may want the container to access a directory on your system. This is when you use bind mounts.

git clone https://github.com/docker/bindmount-apps
If you want to access data on your system, you can use a bind mount. A bind mount lets you share a directory from your host's filesystem into the container.
To add a bind mount to this project, simply go to the compose.yaml file and uncomment the following lines:

todo-app:
    # ...
    volumes:
      - ./app:/usr/src/app
      - /usr/src/app/node_modules
    
Digging deeper

The volumes element tells Compose to mount the local folder ./app to /usr/src/app in the container for the todo-app service. 
This particular bind mount overwrites the static contents of the /usr/src/app directory in the container and 
creates what is known as a development container. 
The second instruction, /usr/src/app/node_modules, prevents the bind mount from overwriting the container's node_modules directory to preserve the packages installed in the container.
Run this application with the docker compose up command in your project directory.

docker compose up -d
Now, you can take advantage of the container’s environment while you develop the app on your local system. Any changes you make to the app on your local system are reflected in the container. In your local directory, open app/views/todos.ejs in an IDE or text editor, update the Enter your task string, and save the file. Visit or refresh localhost:3001⁠ to see the changes.
